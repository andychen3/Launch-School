#!/usr/bin/env python

import psycopg2
from psycopg2 import extras
import sys
from textwrap import dedent
from datetime import date
from contextlib import contextmanager

class ExpenseData:
    def __init__(self):
        self._setup_schema()

    @contextmanager
    def _database_connect(self):
        connection = psycopg2.connect(dbname="expenses")

        try:
            with connection:
                yield connection
                
        finally:
            connection.close()

    def _display_expenses(self, expenses):
        for expense in expenses:
            columns = [
                str(expense["id"]).rjust(3),
                str(expense["created_on"]),
                str(expense["amount"]).rjust(12),
                str(expense["memo"])
            ]
            print(" | ".join(columns))

    def _display_count(self, row_count):
        match row_count:
            case 0:
                print("There are no expenses.")
            case 1:
                print(f"There is {row_count} expense.")
            case _:
                print(f"There are {row_count} expenses.")

    def _display_total(self, expenses):
        if len(expenses) <= 1:
            return
        
        print(f"{'-' * 60}")
        _sum = sum([expense["amount"] for expense in expenses])
        print(f"Total{str(_sum).rjust(27)}")

    def add_expense(self, amount, memo):
        with self._database_connect() as connection:
            with connection.cursor() as cursor:
                cursor.execute("""INSERT INTO expenses (amount, memo, created_on)
                                        VALUES (%s, %s, %s)
                                    """, (amount, memo, date.today()))

    def _setup_schema(self):
        with self._database_connect() as connection:
            with connection.cursor() as cursor:
                cursor.execute("""
                SELECT COUNT(*) FROM information_schema.tables
                WHERE table_schema = 'public' AND table_name = 'expenses'
                """)
                result = cursor.fetchone()
                
                if not result[0]:
                    cursor.execute("""
                        CREATE TABLE expenses (
                            id serial PRIMARY KEY,
                            amount numeric(6,2) NOT NULL CHECK (amount >= 0.01),
                            memo text NOT NULL,
                            created_on date NOT NULL
                        )
                    """)

    def list_expenses(self):
        with self._database_connect() as connection:
            with connection.cursor(cursor_factory=extras.DictCursor) as cursor:
                cursor.execute("""SELECT * FROM expenses""")
                expenses = cursor.fetchall()
                
        self._display_count(cursor.rowcount)
        self._display_expenses(expenses)
        self._display_total(expenses)

    def search_expenses(self, item):
        with self._database_connect() as connection:
            with connection.cursor(cursor_factory=extras.DictCursor) as cursor:
                sql = "SELECT * FROM expenses WHERE memo ILIKE %s"
                cursor.execute(sql, (f"%{item}",))
                matched_expenses = cursor.fetchall()
        
        self._display_count(cursor.rowcount)
        self._display_expenses(matched_expenses)
        self._display_total(matched_expenses)

    def delete_expense(self, id):
        with self._database_connect() as connection:
            with connection.cursor(cursor_factory=extras.DictCursor) as cursor:
                sql = "SELECT * FROM expenses WHERE id = %s"
                cursor.execute(sql, (id,))
                matched = cursor.fetchall()
                if matched:
                    sql = "DELETE FROM expenses WHERE id = %s"
                    cursor.execute(sql, (id,))
                    print("The following expense has been deleted:")
                    self._display_expenses(matched)
                else:
                    print(f"There is no expense with id '{id}'.")

    def delete_all_expenses(self):
        with self._database_connect() as connection:
            with connection.cursor() as cursor:
                cursor.execute("""DELETE FROM expenses""")
                print("All expenses have been deleted.")
        

class CLI:
    def __init__(self):
        self.application = ExpenseData()

    def run(self, args):
        command = args[0] if args else None
        
        match command:
            case "add":
                if len(args) < 2:
                    print("You must provide an amount and memo.")
                    return
                
                try:
                    amount, memo = args[1:]
                    amount = float(amount)
                except ValueError:
                    print("Amount must be a number.")

                if isinstance(amount, float) and isinstance(memo, str):
                    self.application.add_expense(amount, memo)
                    
            case "list":
                self.application.list_expenses()
            case "search":
                if len(args) < 1:
                    print("You must provide a search query.")
                    return
                self.application.search_expenses(args[1])
            case "delete":
                if len(args) < 1:
                    print("You must provide the expense id to delete.")
                    return
                self.application.delete_expense(args[1])
            case "clear":
                user_input = input("This will remove all expenses. Are you sure? (enter y to confirm) ")

                if user_input.strip().casefold() == "y":
                    self.application.delete_all_expenses()
            case _:
                self.display_help()

    def display_help(self):
        print(dedent("""
        An expense recording system

        Commands:

        add AMOUNT MEMO [DATE] - record a new expense
        clear - delete all expenses
        list - list all expenses
        delete NUMBER - remove expense with id NUMBER
        search QUERY - list expenses with a matching memo field
        """).strip("\n"))
        return

def main():
    cli = CLI()
    cli.run(sys.argv[1:])

if __name__ == '__main__':
    main()